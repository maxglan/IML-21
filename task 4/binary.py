# -*- coding: utf-8 -*-
"""binary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfbbd14EQFBVO0YLHdodvo6BaGe5jkjN
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 24 09:31:02 2021

@author: georgengin
"""
import numpy as np
import xgboost as xgb

train_triplets = np.loadtxt("train_triplets.txt", dtype = int)
test_triplets = np.loadtxt("test_triplets.txt", dtype = int)
complete = np.loadtxt("complete_B0_avg.csv")

"""the second row of our image list (B) is the binary 1 row (as it is closer to A), so we can switch B and C 
in some instances to also have some 0's as classification and not always 1"""

def shuffle_class(triplets):
    new_triplets = np.copy(triplets)
    length = len(triplets[:,0])
    binary = np.ones(length)

    for i in range(int((length-1) / 2)):

        new_triplets[i*2, 1] = triplets[i*2, 2]
        new_triplets[i*2, 2] = triplets[i*2, 1]
        
        binary[i*2] = 0
        
    return new_triplets, binary
    
def alternative_shuffle_class(triplets):
    old_triplets = np.copy(triplets)
    new_triplets = np.copy(triplets)

    length = len(triplets[:,0])
    binary = np.ones(2*length)

    #change pos and negative
    for i in range(length):

        new_triplets[i, 1] = triplets[i, 2]
        new_triplets[i, 2] = triplets[i, 1]
        binary[length + i] = 0

    combined = np.concatenate((old_triplets, new_triplets))
    total = np.concatenate((combined, np.atleast_2d(binary).T), axis=1)
    np.random.seed(42)
    np.random.shuffle(total)
    return total[:,0:3], total[:,3]

def preprocess(triplets):
  #concatenate the given preprocessed vectors of the triplet
  length = len(triplets[:,0])
  # 3*1280 = length of Pre-trained output *3
  x = np.zeros((length, 3*1280))
  for i in range(length):
    x[i] = np.concatenate((complete[int(triplets[i,0])], complete[int(triplets[i,1])], complete[int(triplets[i,2])]))
  return x

new_train, train_binary = shuffle_class(train_triplets)
big_train, big_binary = alternative_shuffle_class(train_triplets)

#data = preprocess(new_train)
#normalization
#big_data = preprocessing.normalize(big_data, norm='l2')
#test_data = preprocessing.normalize(test_data, norm='l2')

"""Booooooooooooooooooooooooooost"""
params = {'objective': 'reg:squarederror', 'verbose': True}

model = xgb.XGBClassifier()
model.fit(preprocess(big_train), big_binary)

test_data = preprocess(test_triplets)

solution_xgb = model.predict(test_data)
print(np.sum(solution_xgb))
np.savetxt("prediction_xgb.txt", solution_xgb, fmt='%u')